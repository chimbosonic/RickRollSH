#!/bin/bash
#This is a ugly but amazing hack if the script is being piped into bash
#This if statement gets read into bash then it redirects of the rest of the data to a new file
#Once this is done we exectute that file
if [[ ! $BASH_SOURCE ]]; then
	touch /tmp/lol.sh
	chmod +x /tmp/lol.sh
	cat /dev/stdin > /tmp/lol.sh
	/tmp/lol.sh
fi


#!/bin/bash
#Actual start of the script :) 
#Rick Astley in your Terminal.
# By Serene Han and Justine Tunney <3
# Improved by Alexis Lowe aka Chimbosonic

NEVER_GONNA=$(pwd)/$0
MAKE_YOU_CRY="$HOME/.bashrc"

red='\x1b[38;5;9m'
yell='\x1b[38;5;216m'
green='\x1b[38;5;10m'
purp='\x1b[38;5;171m'
echo -en '\x1b[s'  # Save cursor.

has?() { hash $1 2>/dev/null; }
cleanup() { (( audpid > 1 )) && kill $audpid 2>/dev/null; }
quit() { echo -e "\x1b[2J \x1b[0H ${purp}<3 \x1b[?25h \x1b[u \x1b[m"; }

usage () {
  echo -en "${green}Rick Astley performs ♪ Never Gonna Give You Up ♪ on STDOUT."
  echo -e "  ${purp}[v$version]"
  echo -e "${yell}Usage: ./astley.sh [OPTIONS...]"
  echo -e "${purp}OPTIONS : ${yell}"
  echo -e " help   - Show this message."
  echo -e " inject - Append to ${purp}${USER}${yell}'s bashrc. (Recommended :D)"
}

inject () {
  echo -en "${red}[Inject] "
  echo $NEVER_GONNA >> $MAKE_YOU_CRY
  echo -e "${green}Appended to $MAKE_YOU_CRY. <3"
  echo -en "${yell}If you've astley overdosed, "
  echo -e "delete the line ${purp}\"$NEVER_GONNA\"${yell}."
}

get_audio () {
        match=$(grep --text --line-number '###AUDIO###' $0 | cut -d ':' -f 1 | tail -n 1)
        audio_start=$((match + 1))
	$py -m base64 -d <(sed '$d' <(sed '/###END_AUDIO###/q' <(tail -n +$audio_start -f $0)))
}
get_video() {
        match=$(grep --text --line-number '###VIDEO###' $0 | cut -d ':' -f 1 | tail -n 1)
        video_start=$((match + 1))
	$py -m base64 -d <(sed '$d' <(sed '/###END_VIDEO###/q' <(tail -n +$video_start -f $0)))
}


for arg in "$@"; do
  if [[ "$arg" == "help"* || "$arg" == "-h"* || "$arg" == "--h"* ]]; then
    usage && exit
  elif [[ "$arg" == "inject" ]]; then
    inject && exit
  else
    echo -e "${red}Unrecognized option: \"$arg\""
    usage && exit
  fi
done
trap "cleanup" INT
trap "quit" EXIT

if has? python; then
  py=python
elif has? python3; then
  py=python3
fi

echo -en "\x1b[?25l \x1b[2J \x1b[H"  # Hide cursor, clear screen.

#echo -e "${yell}Fetching audio..."
if has? afplay; then
  # On Mac OS, if |afplay| available, pre-fetch compressed audio.
  [ -f /tmp/roll.s16 ] || get_audio >/tmp/roll.s16
  afplay /tmp/roll.s16 &
elif has? aplay; then
  # On Linux, if |aplay| available, stream raw sound.
  get_audio | aplay -Dplug:default -q -f S16_LE -r 16000 &
fi
audpid=$!

#echo -e "${yell}Fetching video..."
# Sync FPS to reality as best as possible. Mac's freebsd version of date cannot
# has nanoseconds so inject python. :/
$py <(cat <<EOF
import sys
import time
fps = 30; time_per_frame = 1.0 / fps
buf = ''; frame = 0; next_frame = 0
begin = time.time()
try:
  for i, line in enumerate(sys.stdin):
    if i % fps == 0:
      frame += 1
      sys.stdout.write(buf); buf = ''
      elapsed = time.time() - begin
      repose = (frame * time_per_frame) - elapsed
      if repose > 0.0:
        time.sleep(repose)
      next_frame = elapsed / time_per_frame
    if frame >= next_frame:
      buf += line
except KeyboardInterrupt:
  pass
EOF
) < <(get_video | bunzip2 -q 2> /dev/null)


exit 0
